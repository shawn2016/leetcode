// 20. 有效的括号
// 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

// 有效字符串需满足：

// 左括号必须用相同类型的右括号闭合。
// 左括号必须以正确的顺序闭合。


// 示例 1：

// 输入：s = "()"
// 输出：true
// 示例 2：

// 输入：s = "()[]{}"
// 输出：true
// 示例 3：

// 输入：s = "(]"
// 输出：false
// 示例 4：

// 输入：s = "([)]"
// 输出：false
// 示例 5：

// 输入：s = "{[]}"
// 输出：true


// 提示：

// 1 <= s.length <= 104
// s 仅由括号 '()[]{}' 组成
var isValid = (s) => {
    let n = s.length //获取括号个数
    if (n % 2 == 1) //括号有奇数个，一定无效
        return false;

    const stack = []; //创建栈
    let top = -1; //栈顶指针
    //遍历括号字符串
    for (let i = 0; i < n; ++i) {
        //遍历到左括号则压入栈
        if (s[i] == '(' || s[i] == '[' || s[i] == '{') {
            stack[++top] = s[i];
        } else {
            // 遍历到右括号则从栈中取出，检查是否匹配                                 
            if (top == -1)
                //若栈空，说明无左括号与之匹配                              
                return false;
            // 
            if (s[i] == ')' && stack[top] != '(' || s[i] == ']' && stack[top] != '[' || s[i] == '}' && stack[top] != '{') return false;

            --top;
        }
    }

    return top == -1; //若栈不为空，则说明还有左括号未匹配
}